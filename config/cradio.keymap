/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    flavor = "tap-preferred";
    tapping_term_ms = <200>;
};

&mmv {
    time-to-max-speed-ms = <680>;
    acceleration-exponent = <2>;
};

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        td: tapdance {
            compatible = "zmk,behavior-hold-tap";
            label = "TAPDANCE";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
    };

    combos {
        compatible = "zmk,combos";

        Layer1 {
            bindings = <&tog 1>;
            key-positions = <31 32>;
            layers = <0 1>;
        };

        Caps {
            bindings = <&kp CAPSLOCK>;
            key-positions = <30 33>;
            layers = <0 1>;
        };

        BlueTooth {
            bindings = <&bt BT_CLR>;
            key-positions = <0 10 20>;
        };

        Bootloader {
            bindings = <&bootloader>;
            key-positions = <9 19 29>;
        };

        Shifted {
            bindings = <&sl 2>;
            key-positions = <12 17>;
            layers = <0>;
        };

        Sticky1 {
            bindings = <&sl 1>;
            key-positions = <13 16>;
        };

        new_combo {
            bindings = <&tog 2>;
            key-positions = <30 32>;
            layers = <0 2>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Alphas {
            bindings = <
&kp Q  &kp W  &kp F           &kp P             &kp G             &kp J                &kp L            &kp U            &kp Y    &kp SEMICOLON
&kp A  &kp R  &hm LEFT_WIN S  &hm LEFT_ALT T    &kp D             &kp H                &hm RIGHT_ALT N  &hm RIGHT_WIN E  &kp I    &kp O
&kp Z  &kp X  &kp C           &kp V             &kp B             &kp K                &kp M            &kp COMMA        &kp DOT  &kp SLASH
                              &kp LEFT_CONTROL  &kp LEFT_SHIFT    &td ENTER BACKSPACE  &td TAB SPACE
            >;
        };

        Symbols {
            bindings = <
&kp N1   &kp N2            &kp N3                  &kp N4                     &kp N5               &kp N6     &kp N7     &kp N8     &kp N9      &kp N0
&kp ESC  &kp SINGLE_QUOTE  &hm LEFT_WIN SEMICOLON  &hm LEFT_ALT LEFT_BRACKET  &kp RIGHT_BRACKET    &kp LEFT   &kp DOWN   &kp UP     &kp RIGHT   &kp RET
&kp Z    &kp X             &kp C                   &kp V                      &kp BACKSLASH        &kp EQUAL  &kp MINUS  &kp COMMA  &kp PERIOD  &kp GRAVE
                                                   &kp LEFT_CONTROL           &kp LEFT_SHIFT       &trans     &trans
            >;
        };

        Shifted {
            bindings = <
&kp LS(N1)  &kp LS(N2)            &kp LS(N3)         &kp LS(N4)            &kp LS(N5)           &kp LS(N6)     &kp LS(N7)     &kp LS(N8)     &kp LS(N9)      &kp LS(N0)
&kp ESC     &kp LS(SINGLE_QUOTE)  &kp LS(SEMICOLON)  &kp LS(LEFT_BRACKET)  &kp LS(RBRC)         &kp LEFT       &kp DOWN       &kp UP         &kp RIGHT       &kp RET
&kp Z       &kp X                 &kp C              &kp V                 &kp LS(BACKSLASH)    &kp LS(EQUAL)  &kp LS(MINUS)  &kp LS(COMMA)  &kp LS(PERIOD)  &kp DEL
                                                     &kp LCTRL             &kp LEFT_SHIFT       &trans         &trans
            >;
        };
    };
};
